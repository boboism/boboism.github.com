<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | { blog: :boboism }]]></title>
  <link href="http://boboism.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://boboism.github.io/"/>
  <updated>2013-05-24T20:06:54+08:00</updated>
  <id>http://boboism.github.io/</id>
  <author>
    <name><![CDATA[Jianbo Su]]></name>
    <email><![CDATA[sujianbo@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Write A Simple WebService Provider Using Ruby Other Than Java]]></title>
    <link href="http://boboism.github.io/blog/2013/05/22/how-to-write-a-simple-webservice-provider-using-ruby-other-than-java/"/>
    <updated>2013-05-22T12:14:00+08:00</updated>
    <id>http://boboism.github.io/blog/2013/05/22/how-to-write-a-simple-webservice-provider-using-ruby-other-than-java</id>
    <content type="html"><![CDATA[<p>最近在做一个程序，用于我的EAM（固定资产管理系统）跟公司的ERP对接固定资产的数据。开始是想直接用MES在用的接口系统，修修补补上。
但是发现这个接口系统相对来说耦合比较厉害，如果要改来用，怕且都要搞个半个月才能上线。
后来就打算直接用Ruby写算了。于是就有了这篇文章。
下面看看其中的一个XML规格(大概),这是由ERP项目组定义的规法：</p>

<p>``` xml 资产导入
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
<Interface Sender="EAM" Receiver="ERP" Billtype="F10">
  <Bill></p>

<pre><code>&lt;BillHeader&gt;
  &lt;AcceptanceDate&gt;2006-08-28 00:00:00&lt;/AcceptanceDate&gt;
  &lt;AssetName&gt;笔记本电脑&lt;/AssetName&gt;
  &lt;AssetNo&gt;703021&lt;/AssetNo&gt;
  &lt;Brand&gt;IBM X60&lt;/Brand&gt;
  &lt;Category&gt;7&lt;/Category&gt;
  &lt;IsSpecialFund&gt;否&lt;/IsSpecialFund&gt;
  &lt;IsTariff&gt;否&lt;/IsTariff&gt;
  &lt;IsVat&gt;否&lt;/IsVat&gt;
  &lt;Model&gt;&lt;/Model&gt;
  &lt;OriginalValue&gt;100.0&lt;/OriginalValue&gt;
  &lt;Salvage&gt;20.0&lt;/Salvage&gt;
  &lt;SerialNo&gt;L3B6534&lt;/SerialNo&gt;
  &lt;ServiceDate&gt;2006-08-28 00:00:00&lt;/ServiceDate&gt;
  &lt;SubCategory&gt;03&lt;/SubCategory&gt;
  &lt;TaxPreferType&gt;不属于&lt;/TaxPreferType&gt;
&lt;/BillHeader&gt;
&lt;BillBody&gt;
  &lt;Entry&gt;
    &lt;AllocationQuantity&gt;0.5&lt;/AllocationQuantity&gt;
    &lt;ConstructionPeriod&gt;1&lt;/ConstructionPeriod&gt;
    &lt;CostCenter&gt;00001&lt;/CostCenter&gt;
    &lt;ManagementDepartment&gt;00002&lt;/ManagementDepartment&gt;
    &lt;SpecialPurpose&gt;01&lt;/SpecialPurpose&gt;
  &lt;/Entry&gt;
  &lt;Entry&gt;
    &lt;AllocationQuantity&gt;0.5&lt;/AllocationQuantity&gt;
    &lt;ConstructionPeriod&gt;1&lt;/ConstructionPeriod&gt;
    &lt;CostCenter&gt;00008&lt;/CostCenter&gt;
    &lt;ManagementDepartment&gt;00002&lt;/ManagementDepartment&gt;
    &lt;SpecialPurpose&gt;01&lt;/SpecialPurpose&gt;
  &lt;/Entry&gt;
&lt;/BillBody&gt;
</code></pre>

<p>  </Bill>
</Interface>
```</p>

<p>我最近都在用Ruby on Rails在开发项目（个人／公司），所以感觉上这个应该没有太大困难。不过还是有以下问题需要解决：</p>

<ul>
<li>不太规范的SOAP XML内容格式。</li>
<li>How to call webservice？</li>
<li>定时执行方式？</li>
</ul>


<p>想用ActiveRecord直接生成XML，但是需求的XML跟ActiveRecord直接生成出来的样子不太一样。后来看了ActiveRecord的XML相关的builder的代码，觉得还是使用builder定制吧。
就有了以下的代码：</p>

<p>``` ruby ActiveRecord::Base#to_erp_xml
module ActiveRecord
  class Base</p>

<pre><code>def to_erp_xml(options={})
  require 'builder' unless defined?(Builder)
  options = options.dup
  xml = ::Builder::XmlMarkup.new
  xml.instruct! :xml, :version =&gt; "1.0", :encoding =&gt; "UTF-8"
  interface_attributes = [:sender, :receiver, :billtype].inject({}) do |acc, im| 
    acc.merge({im.to_s.camelize =&gt; options[:interface][im]}) if options[:interface][im]
  end
  xml.Interface(interface_attributes) do |interface|
    if options[:include]
      interface.Bill do |bill|
        bill.BillHeader do |bill_header|
          self.class.column_names.sort.each do |col|
            unless options[:except] &amp;&amp; Array(options[:except]).include?(col.to_sym)
              bill_header.tag! col.to_s.camelize, self[col.to_sym]
            end
          end
        end
        bill.BillBody do |bill_body|
          Array(options[:include]).each do |attr|
            self.send(attr.to_sym).each do |association|
              bill_body.Entry do |entity|
                association.class.column_names.sort.each do |col| 
                  unless options[:except] &amp;&amp; Array(options[:except]).include?(col.to_sym)
                    entity.tag! col.to_s.camelize, association[col.to_sym]
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  xml.target!.to_s
end
</code></pre>

<p>  end
end
```</p>

<p>为啥写的这么别扭？其实是因为我直接使用了db的view去抓数据。哈哈哈，为防以后会有变更，这样直接修改SQL就可以了：</p>

<p>``` ruby AssetF10&amp;AllocationF10
class AssetF10 &lt; ActiveRecord::Base
  self.table_name = &ldquo;vw_asset_erp&rdquo;
  self.primary_key = &ldquo;id&rdquo;</p>

<p>  has_many :allocations, :class_name => &ldquo;AllocationF10&rdquo;, :foreign_key => &ldquo;asset_id&rdquo;
end</p>

<p>class AllocationF10 &lt; ActiveRecord::Base
  self.table_name = &ldquo;vw_asset_allocation_erp&rdquo;
  self.primary_key = &ldquo;id&rdquo;</p>

<p>  belongs_to :asset, :class_name => &ldquo;AssetF10&rdquo;#, :foreign_key => &ldquo;asset_id&rdquo;
end
```</p>

<p>到这步，基本上XML是能够生成了，但是如何去调用呢？上rubygems.org看了看包的使用量，soap这一块savon相对来说比较好，而且文档还是很充分。感觉这样写的话相对Java的SOA调用使用xfire非常简洁方便。</p>

<p>``` ruby Savon.client
client = Savon.client(:wsdl => &ldquo;<a href="http://172.18.81.20/BOI/Service.asmx?WSDL">http://172.18.81.20/BOI/Service.asmx?WSDL</a>&rdquo;)
ws_attrs = {
  :interface => {:sender => &ldquo;EAM&rdquo;, :receiver => &ldquo;ERP&rdquo;, :billtype => &ldquo;F10&rdquo;},
  :func_name => &ldquo;FixedAssetImport&rdquo;,
  :handshake => &ldquo;111111&rdquo;
}
receivable_assets = []
unreceivable_assets = []
AssetF10.all.each do |asset|
  token = UUIDTools::UUID.random_create.to_s.gsub(&ldquo;&ndash;&rdquo;,&ldquo;&rdquo;).upcase
  parameters = asset.to_erp_xml(ws_attrs.merge({:include => :allocations, :except => [:id, :asset_sync_status, :asset_id]}))
  resp = client.call(:boi_invoke, :message => {</p>

<pre><code>:from       =&gt; "#{ws_attrs[:interface][:sender]}#{ws_attrs[:handshake]}", 
:to         =&gt; ws_attrs[:interface][:receiver], 
:token      =&gt; token,
:func_name  =&gt; "#{ws_attrs[:func_name]}_#{ws_attrs[:interface][:billtype]}", 
:parameters =&gt; "#{parameters.to_s}" })
</code></pre>

<p>  p parameters
  if resp.body[:boi_invoke_response][:boi_invoke_result]</p>

<pre><code>receivable_assets &lt;&lt; {asset.asset_no =&gt; "TOKEN=#{token}"}
# update records
asset.asset_sync_status = 1
asset.save
</code></pre>

<p>  else</p>

<pre><code>unreceivable_assets &lt;&lt; {asset.asset_no =&gt; "TOKEN=#{token} #{resp.body[:boi_invoke_response][:result]}"}
</code></pre>

<p>  end
end
```
OK，webservice call的问题已经解决了。就剩下最后一个问题，定时调用！
一开始就想通过linux crontab来定时调用这接口，这样就会相对于固定资产管理系统本身的sidekiq独立起来（毕竟这个是一个月才调用1次的接口，无需实时调要求，感觉也没有这个必要）</p>

<p>``` bash eam_soa_f10.sh</p>

<h1>!/bin/sh</h1>

<p>/home/it/.rvm/rubies/ruby-1.9.3-p374/bin/ruby /home/it/projects/ruby/cli/eam_soa/eam_soa_f10.rb >> /home/it/projects/ruby/cli/eam_soa/eam_soa_f10.log 2>&amp;1
```</p>

<p>接着在crontab中增加一行调用：</p>

<p><code>bash crontab
* * 25 * * /home/it/projects/ruby/cli/eam_soa/eam_soa_f10.sh
</code></p>

<p>OK~ 大功告成。相对Java版本的接口系统，同样功能大概只用了其1个类（差不多）的代码量就完成了～。</p>
]]></content>
  </entry>
  
</feed>
